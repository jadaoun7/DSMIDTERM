trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  dockerImageName: 'jadaoun/dsmidterm-api'
  dockerRegistryServiceConnection: 'myContainerRegistry'
  azureSubscription: 'Azureserviceconnection'  # Name of your Azure service connection
  appServiceName: 'DSMIDTERM'                 # Name of your App Service
  resourceGroupName: 'myResourceGroup'           # Name of your Resource Group

stages:
- stage: Build
  jobs:
  - job: BuildAndTest
    steps:
    - task: UseDotNet@2
      inputs:
        version: '6.0.x'
        packageType: 'sdk'

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        projects: '$(solution)'

    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Run tests'
      inputs:
        command: 'test'
        projects: '**/*Tests/*.csproj'
        arguments: '--configuration $(buildConfiguration)'

    - task: Docker@2
      displayName: 'Login to Docker'
      inputs:
        command: 'login'
        containerRegistry: '$(dockerRegistryServiceConnection)'

    - task: Docker@2
      displayName: 'Build and push Docker image'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(dockerImageName)'
        command: 'buildAndPush'
        Dockerfile: 'Dockerfile'
        tags: |
          $(Build.BuildId)
          latest

- stage: Deploy
  jobs:
  - deployment: DeployWebApp
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              appName: '$(appServiceName)'
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
